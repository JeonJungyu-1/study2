[{"/Users/jeon/Desktop/react/react-p/src/index.js":"1"},{"size":2835,"mtime":1642646659478,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"177p8bt","/Users/jeon/Desktop/react/react-p/src/index.js",["7","8"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst scaleNames = {\n    c: 'Celsius',\n    f: 'Fahrenheit'\n};\n\nclass TemperatureInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {temperature: ''};\n    }\n\n    handleChange(e) {\n        // this.setState({temperature: e.target.value});\n        this.props.onTemperatureChange(e.target.value);\n    }\n\n    render() {\n        const temperature = this.props.temperature;\n        const scale = this.props.scale;\n        return (\n            <fieldset>\n                <legend>Enter temperature in {scaleNames[scale]}:</legend>\n                <input \n                    value={temperature}\n                    onChange={this.handleChange} />\n            </fieldset>\n        );\n    }\n}\n\n\nfunction BoilingVerdict(props) {\n    if (props.celsius >= 100) {\n        return <p>The water would boil.</p>;\n    }\n    return <p>The water would not boil.</p>;\n}\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n        this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n        this.state = {temperature: '', scale: 'c'};\n    }\n\n    handleCelsiusChange(temperature) {\n        this.setState({scale: 'c', temperature});\n    }\n    \n    handleFahrenheitChange(temperature) {\n        this.setState({scale: 'f', temperature});\n    }\n\n    render() {\n        const scale = this.state.scale;\n        const temperature = this.state.temperature;\n        const celsius = scale == 'f' ? tryConvert(temperature, toCelsius) : temperature;\n        const fahrenheit = scale == 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n        return (\n            <div>\n                <TemperatureInput \n                    scale='c'\n                    temperature={celsius}\n                    onTemperatureChange={this.handleCelsiusChange} />\n                <TemperatureInput \n                    scale='f' \n                    temperature={fahrenheit}\n                    onTemperatureChange={this.handleFahrenheitChange} />\n                <BoilingVerdict\n                    celsius={parseFloat(celsius)} />\n            </div>\n        );\n    }\n}\n\nfunction toCelsius(fahrenheit) {\n    return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n    return (celsius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n    const input = parseFloat(temperature);\n    if (Number.isNaN(input)) {\n        return '';\n    }\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString();\n}\n\n\nReactDOM.render(\n    <Calculator />,\n    document.getElementById('root')\n  );",{"ruleId":"9","severity":1,"message":"10","line":63,"column":31,"nodeType":"11","messageId":"12","endLine":63,"endColumn":33},{"ruleId":"9","severity":1,"message":"10","line":64,"column":34,"nodeType":"11","messageId":"12","endLine":64,"endColumn":36},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]